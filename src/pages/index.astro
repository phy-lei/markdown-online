---
import Editor from '@/components/editor';
import Preview from '@/components/preview';
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Astro</title>

    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/5.4.0/github-markdown-light.min.css"
      integrity="sha512-kDjsFiusauOzRWlNNk7R5nFRVUPFlZjIqI3F0/DYUO9Uz93R0V4zNfrWGSKFtZvHnTIsoM3GwDaqQBJt8ZVt6w=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <link
      href="https://cdn.bootcdn.net/ajax/libs/highlight.js/11.8.0/styles/a11y-light.min.css"
      rel="stylesheet"
    />
  </head>
  <body>
    <div class="flex flex-col h-screen">
      <div class="w-full h-10">header</div>
      <div class="flex flex-1">
        <div id="editor" class="w-50% h-100%"></div>
        <Preview client:load />
        <Editor client:load />
      </div>
    </div>
  </body>
  <script>
    import { editor as mEditor } from 'monaco-editor';
    import editorWorker from 'monaco-editor/esm/vs/editor/editor.worker?worker';
    import tsWorker from 'monaco-editor/esm/vs/language/typescript/ts.worker?worker';
    import cssWorker from 'monaco-editor/esm/vs/language/css/css.worker?worker';
    import jsonWorker from 'monaco-editor/esm/vs/language/json/json.worker?worker';

    window.MonacoEnvironment = {
      getWorker(_moduleId: unknown, label: string) {
        switch (label) {
          case 'css':
            return new cssWorker();
          case 'json':
            return new jsonWorker();
          case 'typescript':
          case 'javascript':
            return new tsWorker();
          default:
            return new editorWorker();
        }
      },
    };
    const editor = mEditor.create(document.getElementById('editor'), {
      value: '',
      language: 'markdown',
      automaticLayout: true,
      lineDecorationsWidth: 5,
      lineNumbersMinChars: 3,
      overviewRulerBorder: false,
      padding: { top: 15 },
    });

    editor.onDidChangeModelContent((e) => {
      const event = new CustomEvent('editor-change', {
        detail: editor.getValue(),
      });
      window.dispatchEvent(event);
    });
  </script>
</html>
